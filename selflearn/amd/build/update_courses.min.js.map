{"version":3,"file":"update_courses.min.js","sources":["../src/update_courses.js"],"sourcesContent":["define(['jquery', 'core/ajax'], function($, Ajax) {\n    return {\n        init: function() {\n            const toggle = $('#toggle');\n            const toggleState = toggle.prop('checked') ? 1 : 0;\n            const searchInput = $('input[name=\"search_input\"]');\n            var searchText = \"\" + searchInput.val();\n\n            // const ajaxUrl = toggle.data('ajax-url'); // Get AJAX URL from the toggle element\n            const ajaxUrl = '/mod/selflearn/search.php';\n            window.console.log('Search: ' + searchText, \"Authors: \" + toggleState, \"URL: \" + ajaxUrl);\n\n            /**\n             * REST API query for courses that match selection.\n             */\n            function updateCourses() {\n                let searchQuery = searchInput.val();\n                let toggleState = toggle.prop('checked') ? 1 : 0;\n                window.console.log('Search: ' + searchQuery, \"Authors: \" + toggleState);\n\n                var request = Ajax.call([{\n                    methodname: 'selflearn_search_items',\n                    args: { search: searchQuery, fromAllAuthors: toggleState}\n                }]);\n                request[0].then(function(data) {\n                    window.console.log('Query Results: ' + JSON.stringify(data));\n                    var course_select = $('#id_course_selection');\n                    course_select.empty();\n\n                    var options = [];\n                    if (data && data.length >0) {\n                        data.forEach(function(course) {\n                            window.console.log('course: ' + JSON.stringify(course));\n                            var option = {\n                                value: course.id,\n                                text: course.name\n                            };\n                            course_select.append($('<option>', option));\n                            options.push(option);\n                        });\n                        course_select.value = data[0].id;\n                    }\n\n                    // course_select._qf.element.options = options;\n                    $('[name=\"course_select\"]').val(JSON.stringify(options));\n                }).fail(function(error) {\n                    window.console.log('AJAX request failed', error);\n                });\n            }\n\n            // Attach event listeners\n            toggle.on('change', updateCourses);\n            searchInput.on('input', updateCourses);\n        }\n    };\n});\n"],"names":["define","$","Ajax","init","toggle","toggleState","prop","searchInput","searchText","val","updateCourses","searchQuery","window","console","log","call","methodname","args","search","fromAllAuthors","then","data","JSON","stringify","course_select","empty","options","length","forEach","course","option","value","id","text","name","append","push","fail","error","on"],"mappings":"AAAAA,sCAAO,CAAC,SAAU,cAAc,SAASC,EAAGC,YACjC,CACHC,KAAM,iBACIC,OAASH,EAAE,WACXI,YAAcD,OAAOE,KAAK,WAAa,EAAI,EAC3CC,YAAcN,EAAE,kCAClBO,WAAa,GAAKD,YAAYE,eASzBC,oBACDC,YAAcJ,YAAYE,MAC1BJ,YAAcD,OAAOE,KAAK,WAAa,EAAI,EAC/CM,OAAOC,QAAQC,IAAI,WAAaH,YAAa,YAAcN,aAE7CH,KAAKa,KAAK,CAAC,CACrBC,WAAY,yBACZC,KAAM,CAAEC,OAAQP,YAAaQ,eAAgBd,gBAEzC,GAAGe,MAAK,SAASC,MACrBT,OAAOC,QAAQC,IAAI,kBAAoBQ,KAAKC,UAAUF,WAClDG,cAAgBvB,EAAE,wBACtBuB,cAAcC,YAEVC,QAAU,GACVL,MAAQA,KAAKM,OAAQ,IACrBN,KAAKO,SAAQ,SAASC,QAClBjB,OAAOC,QAAQC,IAAI,WAAaQ,KAAKC,UAAUM,aAC3CC,OAAS,CACTC,MAAOF,OAAOG,GACdC,KAAMJ,OAAOK,MAEjBV,cAAcW,OAAOlC,EAAE,WAAY6B,SACnCJ,QAAQU,KAAKN,WAEjBN,cAAcO,MAAQV,KAAK,GAAGW,IAIlC/B,EAAE,0BAA0BQ,IAAIa,KAAKC,UAAUG,aAChDW,MAAK,SAASC,OACb1B,OAAOC,QAAQC,IAAI,sBAAuBwB,UApClD1B,OAAOC,QAAQC,IAAI,WAAaN,WAAY,YAAcH,YAAa,kCAyCvED,OAAOmC,GAAG,SAAU7B,eACpBH,YAAYgC,GAAG,QAAS7B"}